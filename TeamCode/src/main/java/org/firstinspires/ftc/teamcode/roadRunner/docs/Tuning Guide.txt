All tuning was done with battery voltage > 13.0V. Ensure battery is fully charged before every match!
Read the tuning guide multiple times so that you know what tuner tunes what values. Also, the order
of tuning given in the tuning guide is not the most optimal. I found motor velocity PID to be easier
to tune as follower PID depends upon battery voltage which may vary over time. I also discovered that
one can use motor encoders for velocity control while using dead wheels for localization.

Check motor wiring. Ensure that GoBilda motor power cable is connected properly (red to red, black to
black). If the cables are reversed, you will find that encoder values decrease with positive power!
Run MotorDirectionDebugger to configure motors. Ensure each motor moves in the intended direction.
Configure motor direction and wiring to get this working right. Note that this is different from
configuring the dead wheel encoders.

Update the following DriveConstants values. Note low velocity and acceleration values. High values
gave me untold tuning grief and no real benefit of zipping the bot around at high speeds.
 TRACK_WIDTH = 9.25; // Physically measured value
 kV = 1 / rpmToVelocity(MAX_RPM);
 kA = 0;
 kStatic = 0;
 MAX_VEL = 36;
 MAX_ACCEL = 36;
 MAX_ANG_VEL = Math.toRadians(90.0);
 MAX_ANG_ACCEL = Math.toRadians(90.0);

Update the following TwoTrackingWheelLocalizer values
PARALLEL_X = 3.0; // X is the up and down direction
PARALLEL_Y = 1.8755; // Y is the strafe direction
PERPENDICULAR_X = -3.0;
PERPENDICULAR_Y = -1.875;

Run LocalizationTest, update to show motor encoder values. Reverse the encoders, if needed, so that
moving the bot forward increases the parallel encoder value. Strafing left increases the
perpendicular encoder values. Drive forward a large distance and then set
TwoWheelTrackingLocalizer.X_MULTIPLIER = measured distance (via measuring
tape) / reported distance (reported by telemetry).
Similarly, strafe a large distance and set
TwoWheelTrackingLocalizer.Y_MULTIPLIER = measured (tape) / reported (telemetry) distance.
Manually drive the bot back and forth, left to right and verify that the telemetry reported distance
differs from the measured distance by less than 0.5". Now your tracking wheels are setup correctly.

Run BackAndForth to tune SampleMecanumDrive.TRANSLATIONAL_PID and HEADING_PID.
Set BackAndForth.DISTANCE = 24. A low value allows one to tune the PIDs without robot crashing into
the perimeter. Follow the guide (the embedded video is very helpful). I used the lowest PID values
that worked fine. Higher values that didn't produce significant gains resulted in bot being jittery
at the start/end of the movement.

Run TrackWidthTuner. Physically measure the track width. Use the track width reported by the tuner to
adjust thd track width to what feels like a correct value. Physical track width measurement should
not vary more than a couple of inches from the reported track width value.
Effective track width = 9.25

Finally, run StraightTest and StrafeTest. If tuning went well, these two would come up very precise
(within 0.5" of actual distance). If the bot is off, then iterate over the tuning process once more.
